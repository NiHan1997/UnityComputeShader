#pragma kernel CSMain

#include "UnityCG.cginc"
#include "GrassHelpers.cginc"

// 顶点输入.
struct SourceVertex
{
    float3 positionOS;			// 模型空间坐标.
};

// 最终需要绘制的顶点数据.
struct DrawVertex
{
    float3 positionWS;			// 顶点世界坐标.
    float height;
};

// 最终需要绘制的顶点组合的三角形数据.
struct DrawTriangle
{
    float3 normalWS;			// 世界空间法线.
    DrawVertex vertices[3];
};

// 计算着色器统计使用.
struct IndirectArgs
{
    int numVerticesPerInstance;
    int numInstances;
    int startVertexIndex;
    int startInstanceIndex;
};

// 缓冲区.
RWStructuredBuffer<SourceVertex> SourceVertexBuffer;
RWStructuredBuffer<int> SourceTriangleBuffer;
AppendStructuredBuffer<DrawTriangle> DrawTriangles;
RWStructuredBuffer<IndirectArgs> IndirectArgsBuffer;

int _numSourceTriangles;        // 原始 Mesh 的三角形数量.
float4x4 _objectToWorld;        // 模型空间 --> 世界空间.

// 草地相关设置.
float _BladeWidth;
float _BladeWidthRandom;
float _BladeHeight;
float _BladeHeightRandom;

#define BLADE_SEGMENTS 3        // 草叶片分段数量, 这里分为 3 段, 含有 7 个顶点.

// 获取世界坐标、世界法线和切线到世界空间的变换矩阵.
void GetCenterAndBasis(SourceVertex a, SourceVertex b, SourceVertex c, 
    out float3 positionWS, out float3 normalWS, out float3x3 tangentToWorld)
{
    float3 positionA_WS = mul(_objectToWorld, float4(a.positionOS, 1)).xyz;
    float3 positionB_WS = mul(_objectToWorld, float4(b.positionOS, 1)).xyz;
    float3 positionC_WS = mul(_objectToWorld, float4(c.positionOS, 1)).xyz;

    positionWS = GetTriangleCenter(positionA_WS, positionB_WS, positionC_WS);
    GetTriangleNormalAndTangentToWorldMatrix(positionA_WS, positionB_WS, positionC_WS, normalWS, tangentToWorld);
}

// 顶点偏移.
DrawVertex SetupBladePoint(float3 anchorWS, float3x3 transformation, float2 uv,
    float width, float height)
{
    float3 offsetTS = float3(uv.x * width, 0, uv.y * height);
    float3 offsetWS = mul(transformation, offsetTS);
    float3 positionWS = anchorWS + offsetWS;

    DrawVertex output;
    output.positionWS = positionWS;
    output.height = uv.y;

    return output;
}

[numthreads(128, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _numSourceTriangles) return;

    int triStart = id.x * 3;
    float3 positionWS, normalWS;
    float3x3 tangentToWorld;
    GetCenterAndBasis(
        SourceVertexBuffer[SourceTriangleBuffer[triStart]],
        SourceVertexBuffer[SourceTriangleBuffer[triStart + 1]],
        SourceVertexBuffer[SourceTriangleBuffer[triStart + 2]],
        positionWS, normalWS, tangentToWorld);

    // 草地随机旋转效果.
    float3x3 faceRotation = AngleAxis3x3(rand(positionWS.xyz) * UNITY_TWO_PI, float3(0, 0, 1));
    float3x3 transformation = mul(tangentToWorld, faceRotation);            // 这里注意矩阵乘法的顺序.

    float height = (rand(positionWS.zyx) * 2 - 1) * _BladeHeightRandom + _BladeHeight;
    float width = (rand(positionWS.xzy) * 2 - 1) * _BladeWidthRandom + _BladeWidth;

    // 顶点数据.
    int numBladeSegments = 3;
    DrawVertex vertices[2 * BLADE_SEGMENTS + 1];
    [unroll]
    for (int i = 0; i < numBladeSegments; ++i)
    {        
        float t = i / (float)numBladeSegments;

        vertices[2 * i] = SetupBladePoint(positionWS, transformation, float2(-0.5, t), width, height);
        vertices[2 * i + 1] = SetupBladePoint(positionWS, transformation, float2(0.5, t), width, height);
    }
    vertices[numBladeSegments * 2] = SetupBladePoint(positionWS, transformation, float2(0.0, 1.0), width, height);

    // 三角形数据.
    int numTriangles = 2 * numBladeSegments - 1;
    [unroll]
    for (int it = 0; it < numTriangles; ++it)
    {
        DrawTriangle tri;
        tri.normalWS = normalWS;
        tri.vertices[0] = vertices[it];
        tri.vertices[1] = vertices[it + 1];
        tri.vertices[2] = vertices[it + 2];

        DrawTriangles.Append(tri);
    }

    InterlockedAdd(IndirectArgsBuffer[0].numVerticesPerInstance, 3 * numTriangles);
}