#pragma kernel CSMain

#include "UnityCG.cginc"
#include "GrassHelpers.cginc"

// 顶点输入.
struct SourceVertex
{
    float3 positionOS;			// 模型空间坐标.
};

// 最终需要绘制的顶点数据.
struct DrawVertex
{
    float3 positionWS;			// 顶点世界坐标.
    float height;
};

// 最终需要绘制的顶点组合的三角形数据.
struct DrawTriangle
{
    float3 normalWS;			// 世界空间法线.
    DrawVertex vertices[3];
};

// 计算着色器统计使用.
struct IndirectArgs
{
    int numVerticesPerInstance;
    int numInstances;
    int startVertexIndex;
    int startInstanceIndex;
};

// 缓冲区.
RWStructuredBuffer<SourceVertex> SourceVertexBuffer;
RWStructuredBuffer<int> SourceTriangleBuffer;
AppendStructuredBuffer<DrawTriangle> DrawTriangles;
RWStructuredBuffer<IndirectArgs> IndirectArgsBuffer;

int _numSourceTriangles;        // 原始 Mesh 的三角形数量.
float4x4 _objectToWorld;        // 模型空间 --> 世界空间.

// 草地相关设置.
float _BladeWidth;
float _BladeWidthRandom;
float _BladeHeight;
float _BladeHeightRandom;

// 获取世界坐标、世界法线和切线到世界空间的变换矩阵.
void GetCenterAndBasis(SourceVertex a, SourceVertex b, SourceVertex c, 
    out float3 positionWS, out float3 normalWS, out float3x3 tangentToWorld)
{
    float3 positionA_WS = mul(_objectToWorld, float4(a.positionOS, 1)).xyz;
    float3 positionB_WS = mul(_objectToWorld, float4(b.positionOS, 1)).xyz;
    float3 positionC_WS = mul(_objectToWorld, float4(c.positionOS, 1)).xyz;

    positionWS = GetTriangleCenter(positionA_WS, positionB_WS, positionC_WS);
    GetTriangleNormalAndTangentToWorldMatrix(positionA_WS, positionB_WS, positionC_WS, normalWS, tangentToWorld);
}

// 顶点偏移.
DrawVertex SetupBladePoint(float3 anchorWS, float3x3 transformation, float2 uv,
    float width, float height)
{
    float3 offsetTS = float3((uv.x - 0.5f) * width, 0, uv.y * height); 
    float3 offsetWS = mul(transformation, offsetTS);
    float3 positionWS = anchorWS + offsetWS;

    DrawVertex output;
    output.positionWS = positionWS;
    output.height = uv.y;

    return output;
}

[numthreads(128, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _numSourceTriangles) return;

    int triStart = id.x * 3;
    float3 positionWS, normalWS;
    float3x3 tangentToWorld;
    GetCenterAndBasis(
        SourceVertexBuffer[SourceTriangleBuffer[triStart]],
        SourceVertexBuffer[SourceTriangleBuffer[triStart + 1]],
        SourceVertexBuffer[SourceTriangleBuffer[triStart + 2]],
        positionWS, normalWS, tangentToWorld);

    DrawVertex vertices[3];

    // 草地随机旋转效果.
    float3 center = positionWS;
    float3x3 faceRotation = AngleAxis3x3(rand(center.xyz) * UNITY_TWO_PI, float3(0, 0, 1));
    float3x3 transformation = mul(tangentToWorld, faceRotation);            // 这里注意矩阵乘法的顺序.

	float height = (rand(center.zyx) * 2 - 1) * _BladeHeightRandom + _BladeHeight;
	float width = (rand(center.xzy) * 2 - 1) * _BladeWidthRandom + _BladeWidth;

    vertices[0] = SetupBladePoint(positionWS, transformation, float2(0, 0), width, height);
    vertices[1] = SetupBladePoint(positionWS, transformation, float2(1, 0), width, height);
    vertices[2] = SetupBladePoint(positionWS, transformation, float2(0.5, 1), width, height);

    DrawTriangle tri;
    tri.normalWS = normalWS;
    tri.vertices[0] = vertices[0];
    tri.vertices[1] = vertices[1];
    tri.vertices[2] = vertices[2];
    DrawTriangles.Append(tri);

    InterlockedAdd(IndirectArgsBuffer[0].numVerticesPerInstance, 3);
}